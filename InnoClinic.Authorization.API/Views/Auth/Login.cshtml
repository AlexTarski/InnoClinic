@using InnoClinic.Shared
@using InnoClinic.Authorization.Business
@using InnoClinic.Authorization.Business.Configuration
@model InnoClinic.Authorization.Business.Models.LoginViewModel
<head>
    <title>Login</title>
    <style>
        .input-form {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .input-form-employee {
            display: flex;
            flex-direction: column;
            align-items: center;
            max-width: 540px;
            box-shadow: 0 0 10px -5px #2c3e50;
            padding: 20px;
            margin: 0 auto;
        }

        .logo {
            justify-content: center;
            display: flex;
            align-content: center;
            margin-bottom: 10px;
        }

        .label {
            align-self: self-start;
            max-width: 500px;
        }

        .input {
            font-size: 16px;
            font-family: Segoe UI, serif;
            background-color: #fff;
            width: 100%;
            max-width: 500px;
            box-sizing: border-box;
        }

        .text-danger {
            color: #e90b0b;
        }

        .text-danger {
            color: #e90b0b;
        }

        .header {
            font-family: Segoe UI, serif;
            color: #332600;
            font-size: 30px;
            text-align: center;
        }

        .sign-in-button {
            font-size: 20px;
            background-color: #3498db;
            border: none;
            border-radius: 10px;
            padding: 10px;
            color: #fff;
            cursor: pointer;
            font-family: Segoe UI, serif;
            width: 100%;
            max-width: 500px;
        }

            .sign-in-button:hover {
                background-color: #2980b9;
            }

            .sign-in-button:active {
                background-color: #2471a3;
                transform: scale(0.98);
            }

            .sign-in-button:disabled {
                background-color: #75bceb;
                color: #c5d0db;
                cursor: not-allowed !important;
            }

        .block {
            margin-top: 10px;
            max-width: 500px;
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        .switch-button {
            margin-top: 8px;
            font-size: 16px;
            border-radius: 4px;
            color: #5614FF;
            font-family: Segoe UI, serif;
            display: inline-block;
            text-align: center;
            align-content: center;
            width: fit-content;
        }

        .input.input-error {
            border: 2px solid red;
        }

        .validation-summary-errors {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 0px;
            border-radius: 10px;
            color: #721c24;
            margin-bottom: 20px;
            margin-top: 20px;
            max-width: 500px;
        }

            .validation-summary-errors ul {
                list-style-type: none;
                padding-left: 10px;
                padding-right: 10px;
                margin-top: 8px !important;
                margin-bottom: 8px !important;
            }

            .validation-summary-errors li {
                padding-top: 4px;
                padding-bottom: 4px;
            }

        span.text-danger:not(.show-error) {
            display: none;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
</head>
<body>
    <div class="logo">
        <img src='@AppUrls.AuthUrl/assets/innoclinic-logo.png' alt='InnoClinic Logo' style='height:100px;' />
    </div>
    @if(Model.ClientId == ClientType.EmployeeUI.GetStringValue())
    {
        <div class="header-block">
            <p class="header">Your work, all in one place!</p>
            <p class="header">Sign in to get started</p>
        </div>
    }
    <form asp-controller="Auth" asp-action="Login"
                    method="post"
                    class="input-form @(Model.ClientId == ClientType.EmployeeUI.GetStringValue() ? "input-form-employee" : "input-form")">
        <input type="hidden" asp-for="ReturnUrl" />
        @if(Model.ClientId != ClientType.EmployeeUI.GetStringValue())
        {
            <div class="header">Login</div>
        }
        <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>
        <div class="block">
            <label asp-for="Email" class="label">Email:</label>
            <input asp-for="Email" class="input" type="email"/>
            <span asp-validation-for="Email" class="text-danger"></span>
        </div>
        <div class="block">
            <label asp-for="Password" class="label">Password:</label>
            <input asp-for="Password" class="input" type="password"/>
            <span asp-validation-for="Password" class="text-danger"></span>
        </div>
        <div class="block">
            <button type="submit" class="sign-in-button">Sign In</button>
        </div>
        @if(Model.ClientId == ClientType.ClientUI.GetStringValue())
        {
            <div style="display: flex; justify-content: center">
                <a asp-controller="Auth" asp-action="Register"
                   asp-route-returnUrl="@Model.ReturnUrl" class="switch-button">Sign-Up</a>
            </div>
        }
    </form>

    <script>
        $(function () {
            const $form = $("form");
            const $inputs = $form.find("input");
            const $button = $(".sign-in-button");
            const blurredFields = {};
            $button.attr("disabled", true);

            // On initial load, mark fields with server errors as blurred so their errors show
            $("span[data-valmsg-for]").each(function () {
                console.log(this)
                const $errorSpan = $(this);
                const fieldName = $errorSpan.attr("data-valmsg-for");
                    if ($errorSpan.text().trim().length > 0) {
                    blurredFields[fieldName] = true;
                }
            });

            // Override jQuery Validate's highlight/unhighlight to do nothing
            if ($.validator) {
                $.validator.setDefaults({
                    highlight: function () {},
                    unhighlight: function () {}
                });
            }

            function updateFieldErrorState() {
                $inputs.each(function () {
                    const $input = $(this);
                    const fieldName = $input.attr("name");
                    const $errorSpan = $("span[data-valmsg-for='" + fieldName + "']");
                    const hasError = $errorSpan.text().trim().length > 0;

                    // Only show error if field has been blurred at least once or has server error
                    if (blurredFields[fieldName] && hasError) {
                        $input.addClass("input-error");
                        $errorSpan.addClass("show-error");
                    }
                    else
                    {
                        $input.removeClass("input-error");
                        $errorSpan.removeClass("show-error");
                    }

                });
            }

            function updateButtonState() {
                // If no field has been blurred and there are no server errors, enable the button
                const anyBlurred = Object.values(blurredFields).some(v => v);
                const hasServerErrors = $("span[data-valmsg-for]").toArray().some(span => $(span).text().trim().length > 0);
                if (!anyBlurred && !hasServerErrors) {
                    $button.prop("disabled", true);
                    return;
                }
                // Otherwise, enable only if the form is valid
                $button.prop("disabled", !$form.valid());
            }

            // Mark field as blurred (touched) on blur
            $form.on("blur", "input", function () {
                const fieldName = $(this).attr("name");
                blurredFields[fieldName] = true;
                setTimeout(function () {
                    $(this).valid && $(this).valid();
                    updateFieldErrorState();
                    updateButtonState();
                }.bind(this), 50);
            });

            // On submit, mark all fields as blurred to show all errors
            $form.on("submit", function () {
                $inputs.each(function () {
                    const fieldName = $(this).attr("name");
                    blurredFields[fieldName] = true;
                });
                updateFieldErrorState();
                updateButtonState();
            });

            // Also update on input for instant feedback after blur
            $form.on("input", "input", function () {
                updateFieldErrorState();
                updateButtonState();
            });

            // Initial state: only show server errors, nothing else, and enable button
            updateFieldErrorState();
        });
    </script>
</body>